#!/usr/bin/python3

import csv
from argparse import ArgumentParser
from typing import List, Dict, Optional
import sys
import os

cur_dir = os.path.dirname(os.path.realpath(__file__))
sys.path.insert(0, os.path.join(cur_dir,'poker_now_py'))

from poker_now_py.game import Game

class PN2PS:
    def __init__(self):
        self.parser = ArgumentParser()
        self.parser.add_argument("heroname", help="Your name in log")
        self.parser.add_argument("filenames", nargs='+', help="PokerNow log file(s)")
        self.parser.add_argument("--limit", type=int, default=-1, help="Limit amount of hands processed")
        self.parser.add_argument("--multiplier", type=float, default=1.0, help="Multiply bet amounts by given value")
        self.parser.add_argument("--tablename", default="DGen", type=str, help="Table name")
        self.parser.add_argument("--debug", "-d", action="store_true", help="print debug output")
        self.parser.add_argument("--namemap", "-n", default=None, type=str, help="Map table names to database names. This is helpful when players sign in with different names. Format is \"tablename1 databasename1 tablename2 databasename2 ... tablenameN databasenameN\"")
        self.parser.add_argument("--stdout", "-s", action="store_true", help="Print results to stdout instead of writing to file")
        self.parser.add_argument("--seats", help="number of seats at table (default 10)", default=10, type=int)
        self.parser.add_argument("--site", default="pokerstars", help="specify which site format for hand history output (pokerstars|swc)")
        self.parser.add_argument("--chip-formatter", default="usd", help="how to format chips (usd|raw)")
        args = self.parser.parse_args()

        self.heroname = args.heroname
        self.filenames = [fname.strip('"').strip("'") for fname in args.filenames]
        self.limit = args.limit
        self.multiplier = args.multiplier
        self.table_name = args.tablename
        self.seats = args.seats
        self.site = args.site.lower()
        print("Site:", self.site)

        self.debug = args.debug
        name_map = args.namemap and args.namemap.split()
        if name_map:
            assert not len(name_map) % 2
            name_map = {name_map[i].replace("[[SPACE]]", " ") : name_map[i+1].replace("[[SPACE]]", " ") for i in range(0, len(name_map), 2)}
        self.name_map = name_map
        self.stdout = args.stdout
        cfmt = args.chip_formatter.lower().strip()
        chip_formatter = None
        if cfmt == 'usd':
            chip_formatter = lambda amt: f"${amt:0.2f}"
        elif cfmt == 'raw':
            chip_formatter = lambda amt: f"{int(amt)}"
        else:
            chip_formatter = lambda amt: f"${amt:0.2f}"

        self.chip_formatter = chip_formatter

    def process_csv(self, filename: str):
        csv_rows: List[Dict[str, str]] = read_csv_as_dict(filename)
        output_file = f'{os.path.splitext(filename)[0]}.txt'

        game = Game(csv_rows, debug_hand_action=self.debug, name_map=self.name_map, num_seats=self.seats, chip_formatter=self.chip_formatter)

        limit = len(game.hands)
        if self.limit > 0:
            limit = self.limit

        if self.stdout:
            for hand in game.hands[:limit]:
                hand.printPokerStarsDescription(hero_name=self.heroname, multiplier=self.multiplier or 1.0, table_name=self.table_name)
                print("\n\n")
        else:
            with open(output_file, 'w+', encoding='utf-8') as f:
                for hand in game.hands[:limit]:
                    try:
                        if self.site == "swc":
                            descr = hand.getSwCDescription(hero_name=self.heroname, multiplier=self.multiplier or 1.0, table_name=self.table_name or "DGen")
                        else:
                            descr = hand.getPokerStarsDescription(hero_name=self.heroname, multiplier=self.multiplier or 1.0, table_name=self.table_name or "DGen")
                        f.write(descr)
                        f.write("\n\n")
                    except Exception as e:
                        print(f"Error parsing hand #{hand.pn_hand_number}...continuing")
                        continue

    def run(self):
        for filename in self.filenames:
            self.process_csv(filename)


def read_csv_as_dict(file: str) -> Optional[List[Dict[str, str]]]:
    with open(file, 'r', encoding='utf-8') as f:
        try:
            return list(csv.DictReader(f))
        except RuntimeError as e:
            return None

if __name__ == '__main__':
    PN2PS().run()